1
00:00:02,150 --> 00:00:05,150
So now that we added this title
2

2
00:00:05,150 --> 00:00:07,080
as a reusable component
3

3
00:00:07,080 --> 00:00:09,610
and we added our reusable colors,
4

4
00:00:09,610 --> 00:00:12,070
it's time to work on the other features
5

5
00:00:12,070 --> 00:00:15,100
that should be implemented into this game screen.
6

6
00:00:15,100 --> 00:00:19,890
And for this, we need to output a guess made by the phone,
7

7
00:00:19,890 --> 00:00:23,310
by the device, because we're playing against the device.
8

8
00:00:23,310 --> 00:00:24,820
And the device should guess,
9

9
00:00:24,820 --> 00:00:28,123
the phone should guess our chosen number.
10

10
00:00:29,020 --> 00:00:31,040
Now to generate this guess
11

11
00:00:31,040 --> 00:00:34,040
we need to calculate a random number.
12

12
00:00:34,040 --> 00:00:38,390
And for this attached, you find this utility function
13

13
00:00:38,390 --> 00:00:40,790
which generates a random number
14

14
00:00:40,790 --> 00:00:45,480
between a min and a max number defined as imports here.
15

15
00:00:45,480 --> 00:00:48,350
And we can also pass in an exclude number
16

16
00:00:48,350 --> 00:00:50,600
which allows us to exclude a certain number
17

17
00:00:50,600 --> 00:00:51,920
from being generated
18

18
00:00:51,920 --> 00:00:54,560
which will be important for making sure
19

19
00:00:54,560 --> 00:00:56,660
that we can't immediately guess
20

20
00:00:56,660 --> 00:00:59,330
the number chosen by the user,
21

21
00:00:59,330 --> 00:01:03,190
because here I wanna make sure that the phone is not able
22

22
00:01:03,190 --> 00:01:06,260
to guess the correct number right at the start.
23

23
00:01:06,260 --> 00:01:09,320
And therefore I add this exclude parameter
24

24
00:01:09,320 --> 00:01:12,240
which allows me to exclude that single number
25

25
00:01:12,240 --> 00:01:15,090
so that the phone can't win automatically
26

26
00:01:15,090 --> 00:01:16,690
in the first round.
27

27
00:01:16,690 --> 00:01:18,550
It's a little extra difficulty
28

28
00:01:18,550 --> 00:01:20,920
that's added here for the phone,
29

29
00:01:20,920 --> 00:01:23,200
hence these three parameter values.
30

30
00:01:23,200 --> 00:01:25,800
And then inside of this function here,
31

31
00:01:25,800 --> 00:01:29,960
I generate a random number with this calculation
32

32
00:01:29,960 --> 00:01:33,230
where I use math random which creates a random number
33

33
00:01:33,230 --> 00:01:37,060
between zero and one with one excluded.
34

34
00:01:37,060 --> 00:01:39,260
And I then multiply this with the difference
35

35
00:01:39,260 --> 00:01:43,100
between max and min to translate this random number
36

36
00:01:43,100 --> 00:01:46,140
between zero and one, to a random number
37

37
00:01:46,140 --> 00:01:47,950
between our max and min
38

38
00:01:49,000 --> 00:01:52,080
and I use math.floor to then round this down.
39

39
00:01:52,080 --> 00:01:53,920
Since this would give us a decimal number
40

40
00:01:53,920 --> 00:01:56,710
with decimal places, and we don't want that.
41

41
00:01:56,710 --> 00:02:00,870
We want integer and we round down with math floor.
42

42
00:02:00,870 --> 00:02:02,750
And since we're rounding down,
43

43
00:02:02,750 --> 00:02:05,690
we actually add our minimum boundary again
44

44
00:02:05,690 --> 00:02:08,650
so that the lowest number we can get is not zero
45

45
00:02:08,650 --> 00:02:10,630
which would be the lowest number otherwise
46

46
00:02:10,630 --> 00:02:15,050
because math.random can produce zero as a result,
47

47
00:02:15,050 --> 00:02:17,840
but that instead our lowest possible boundary
48

48
00:02:17,840 --> 00:02:19,890
is the minimum defined here.
49

49
00:02:19,890 --> 00:02:21,550
That's what we do here.
50

50
00:02:21,550 --> 00:02:24,510
And then here, I just check if that random number happens
51

51
00:02:24,510 --> 00:02:26,760
to be that number that we excluded
52

52
00:02:26,760 --> 00:02:29,240
in which case we call generateRandomBetween
53

53
00:02:29,240 --> 00:02:33,600
again recursively to simply calculate a new random number.
54

54
00:02:33,600 --> 00:02:36,650
And we keep on doing this until we derived a random number
55

55
00:02:36,650 --> 00:02:40,020
that's not equal to the excluded number.
56

56
00:02:40,020 --> 00:02:42,620
And if we did not hit the excluded number,
57

57
00:02:42,620 --> 00:02:44,543
we just returned a random number.
58

58
00:02:45,380 --> 00:02:47,370
So this generates random numbers
59

59
00:02:47,370 --> 00:02:49,690
and now wanna generate a random number
60

60
00:02:49,690 --> 00:02:52,090
when that game screen is loaded.
61

61
00:02:52,090 --> 00:02:54,740
The first guest made by the device
62

62
00:02:54,740 --> 00:02:57,180
should be generated whenever this game screen
63

63
00:02:57,180 --> 00:02:59,093
is rendered for the first time.
64

64
00:02:59,950 --> 00:03:03,910
And this generated random number will change over time
65

65
00:03:03,910 --> 00:03:06,890
and will be reflected in the user interface
66

66
00:03:06,890 --> 00:03:08,620
because I wanna output it here.
67

67
00:03:08,620 --> 00:03:10,770
And therefore we should useState
68

68
00:03:10,770 --> 00:03:13,590
because we got some data that changes over time
69

69
00:03:13,590 --> 00:03:16,610
and where every change should then be reflected
70

70
00:03:16,610 --> 00:03:18,605
on the user interface.
71

71
00:03:18,605 --> 00:03:21,350
Therefore in order to manage state here,
72

72
00:03:21,350 --> 00:03:26,283
we import useState from React of course, as we always do.
73

73
00:03:27,750 --> 00:03:28,700
And in the game screen
74

74
00:03:28,700 --> 00:03:32,150
we can then initialize our state slice.
75

75
00:03:32,150 --> 00:03:33,930
And here I have the currentGuess
76

76
00:03:36,870 --> 00:03:41,430
of the phone and a state updating function.
77

77
00:03:41,430 --> 00:03:44,640
And the initial value for this state
78

78
00:03:44,640 --> 00:03:46,850
should be an initial guess
79

79
00:03:46,850 --> 00:03:51,850
which we make by simply calling generateRandomBetween.
80

80
00:03:51,935 --> 00:03:53,610
And I wanna generate a random number
81

81
00:03:53,610 --> 00:03:55,470
between one and 100
82

82
00:03:55,470 --> 00:03:58,040
because the upper boundary will be excluded
83

83
00:03:58,040 --> 00:04:00,850
because with Math.random, the upper boundary
84

84
00:04:00,850 --> 00:04:03,700
which would be one is excluded.
85

85
00:04:03,700 --> 00:04:06,460
So we have to go one value,
86

86
00:04:06,460 --> 00:04:10,923
one number above our actual highest number here as well.
87

87
00:04:12,010 --> 00:04:14,030
And then I also wanna exclude a number
88

88
00:04:14,030 --> 00:04:17,290
and that excluded number should be the number chosen
89

89
00:04:17,290 --> 00:04:20,790
by the user on this starting screen.
90

90
00:04:20,790 --> 00:04:22,570
So therefore, we need to make sure
91

91
00:04:22,570 --> 00:04:25,660
that we have access to this chosen number in this component.
92

92
00:04:25,660 --> 00:04:28,520
And how do we get access to values
93

93
00:04:28,520 --> 00:04:31,790
that are derived in different components?
94

94
00:04:31,790 --> 00:04:33,500
Typically through props.
95

95
00:04:33,500 --> 00:04:35,850
We could also use React Context
96

96
00:04:35,850 --> 00:04:38,330
but here I'll just use props.
97

97
00:04:38,330 --> 00:04:42,290
And I'll use object destructuring here right away.
98

98
00:04:42,290 --> 00:04:43,830
Alternatively, we could of course,
99

99
00:04:43,830 --> 00:04:48,830
also accept the props object and use the dot notation here,
100

100
00:04:49,000 --> 00:04:51,590
but I will use object destructuring instead.
101

101
00:04:51,590 --> 00:04:56,590
And I expect to get the userNumber as our input here
102

102
00:04:57,130 --> 00:05:00,050
as a property on my props object.
103

103
00:05:00,050 --> 00:05:03,200
And I then can exclude this here.
104

104
00:05:03,200 --> 00:05:06,150
So a phone can't guess this userNumber
105

105
00:05:06,150 --> 00:05:08,083
when that state is initialized.
106

106
00:05:08,960 --> 00:05:10,270
And then this initialGuess
107

107
00:05:10,270 --> 00:05:13,973
is set as our initial value for this state.
108

108
00:05:15,460 --> 00:05:18,200
Okay, so now we have that.
109

109
00:05:18,200 --> 00:05:21,720
Now we have this guess that's being made,
110

110
00:05:21,720 --> 00:05:26,720
and now we can output this guess here in our user interface.
111

111
00:05:26,870 --> 00:05:29,570
And for outputting this guess
112

112
00:05:29,570 --> 00:05:33,670
I wanna build a nice looking text here,
113

113
00:05:33,670 --> 00:05:35,940
a nice looking text element
114

114
00:05:37,110 --> 00:05:41,720
which I actually will outsource into a separate component.
115

115
00:05:41,720 --> 00:05:43,550
Not because we have to,
116

116
00:05:43,550 --> 00:05:46,547
but because I wanna keep this component a bit leaner,
117

117
00:05:46,547 --> 00:05:49,323
especially the JSX code a bit leaner.
118

118
00:05:50,180 --> 00:05:54,000
Therefore in the components folder, I will add a game folder
119

119
00:05:54,000 --> 00:05:57,563
to add the game related components into that folder.
120

120
00:05:58,460 --> 00:06:02,470
And I'll move primary button and title into a UI folder
121

121
00:06:02,470 --> 00:06:07,200
to store genera UI related elements in that folder.
122

122
00:06:07,200 --> 00:06:11,090
This is not required, but helps me organize my files.
123

123
00:06:11,090 --> 00:06:13,560
So I'll move these files
124

124
00:06:13,560 --> 00:06:17,260
and I do want to update my imports automatically
125

125
00:06:17,260 --> 00:06:20,450
so I will choose always automatically update imports
126

126
00:06:20,450 --> 00:06:23,620
to make sure that all the imports are updated,
127

127
00:06:23,620 --> 00:06:26,823
such that moving these files doesn't break the app.
128

128
00:06:27,880 --> 00:06:30,080
And in that components game folder,
129

129
00:06:30,080 --> 00:06:33,330
we can now add a Number Container,
130

130
00:06:33,330 --> 00:06:34,800
the name is up to you.
131

131
00:06:34,800 --> 00:06:36,620
Which will be a simple container
132

132
00:06:36,620 --> 00:06:38,460
that is responsible for outputting
133

133
00:06:38,460 --> 00:06:40,870
the number that was guessed.
134

134
00:06:40,870 --> 00:06:45,130
For this here, I'll add a function Number Container.
135

135
00:06:45,130 --> 00:06:48,963
So a default component function here, which is exported.
136

136
00:06:50,120 --> 00:06:53,760
And I wanna return a view that contains a text.
137

137
00:06:53,760 --> 00:06:56,230
I add this extra view as a rapper
138

138
00:06:56,230 --> 00:06:59,183
so that I can nicely position and style this text.
139

139
00:07:00,220 --> 00:07:01,290
Of course, as you learned,
140

140
00:07:01,290 --> 00:07:04,190
we need to import these two core components
141

141
00:07:04,190 --> 00:07:07,320
from React Native, otherwise we can't use them.
142

142
00:07:07,320 --> 00:07:09,020
So that's something we have to do.
143

143
00:07:10,250 --> 00:07:12,440
And then I expect to get the number
144

144
00:07:12,440 --> 00:07:15,460
that should be output as a prop here.
145

145
00:07:15,460 --> 00:07:18,520
And I expect to get it as the prop that is used
146

146
00:07:18,520 --> 00:07:20,480
or as the value that is used
147

147
00:07:20,480 --> 00:07:24,130
between the putting in closing text of this custom component
148

148
00:07:24,130 --> 00:07:27,160
when that component is used in a different file.
149

149
00:07:27,160 --> 00:07:30,030
So hence we can use this special children prop
150

150
00:07:30,030 --> 00:07:31,823
to output that content.
151

151
00:07:33,190 --> 00:07:36,460
Now, this container is mostly about the styling, of course,
152

152
00:07:36,460 --> 00:07:40,550
and therefore I will add my styles here
153

153
00:07:40,550 --> 00:07:44,913
by using StyleSheet create as we did it many times before.
154

154
00:07:45,950 --> 00:07:48,290
And now the styles that I do want to have here
155

155
00:07:48,290 --> 00:07:51,850
are one style for the container, so for the view.
156

156
00:07:51,850 --> 00:07:55,080
And then one style set or one set of properties
157

157
00:07:55,080 --> 00:07:59,600
for the text, for the actual numberText, you could say.
158

158
00:07:59,600 --> 00:08:02,283
These names, as always, are up to you.
159

159
00:08:03,730 --> 00:08:06,030
Now for the contain, it's totally up to you.
160

160
00:08:06,030 --> 00:08:08,930
And as always, I encourage you to play around with that
161

161
00:08:08,930 --> 00:08:11,830
and come up with any styles you want.
162

162
00:08:11,830 --> 00:08:13,830
I will set a borderWidth,
163

163
00:08:13,830 --> 00:08:17,360
which we already did many times at this point.
164

164
00:08:17,360 --> 00:08:19,820
I will give this a borderColor
165

165
00:08:19,820 --> 00:08:22,390
And here I want to use my global colors
166

166
00:08:22,390 --> 00:08:23,690
so that I take advantage
167

167
00:08:23,690 --> 00:08:26,500
of this global definition of colors.
168

168
00:08:26,500 --> 00:08:28,190
So I will go up to constants
169

169
00:08:28,190 --> 00:08:31,193
and then to the colors file with this import.
170

170
00:08:32,580 --> 00:08:36,090
And then I wanna use color accent 500.
171

171
00:08:36,090 --> 00:08:38,933
So this yellow color here as a color.
172

172
00:08:39,920 --> 00:08:43,650
I'll add a lot of padding with 24 pixels
173

173
00:08:43,650 --> 00:08:45,770
And I'll add a border radius
174

174
00:08:47,270 --> 00:08:50,490
of eight, maybe, to have rounded corners.
175

175
00:08:50,490 --> 00:08:53,100
That's why we also need a view because border radius
176

176
00:08:53,100 --> 00:08:55,973
is not supported on the text element.
177

177
00:08:55,973 --> 00:08:59,500
So if I would've used just a text without a wrapping view,
178

178
00:08:59,500 --> 00:09:02,580
I could have added things like the border and padding,
179

179
00:09:02,580 --> 00:09:04,080
but adding a border radius
180

180
00:09:04,080 --> 00:09:06,600
would not have been possible on iOS.
181

181
00:09:06,600 --> 00:09:09,173
Hence we needed the extra view as a rapper.
182

182
00:09:10,200 --> 00:09:12,680
Now I also wanna have some margin around this box.
183

183
00:09:12,680 --> 00:09:16,233
So actually here, I'll also add a margin of 24 pixels.
184

184
00:09:17,710 --> 00:09:22,060
And since all these views are flex boxes by default,
185

185
00:09:22,060 --> 00:09:25,050
I will add alignItems center
186

186
00:09:25,050 --> 00:09:28,140
and justify content center to make sure
187

187
00:09:28,140 --> 00:09:32,203
that the actual text in that container is nicely centered.
188

188
00:09:33,190 --> 00:09:34,720
And then on the number text,
189

189
00:09:34,720 --> 00:09:36,580
which is the style that will be applied
190

190
00:09:36,580 --> 00:09:38,840
to this text component here,
191

191
00:09:38,840 --> 00:09:43,610
I will set the color to colors accent 500.
192

192
00:09:43,610 --> 00:09:48,370
So to the same yellow and the font size to 36,
193

193
00:09:48,370 --> 00:09:50,393
so that we have a really big number.
194

194
00:09:51,538 --> 00:09:54,173
And I'll set the font weight to bold here.
195

195
00:09:55,050 --> 00:09:59,310
And now we can apply these styles to these element and here.
196

196
00:09:59,310 --> 00:10:02,300
So the container style is applied to the view,
197

197
00:10:02,300 --> 00:10:07,203
and the Number text style is applied to the text.
198

198
00:10:08,370 --> 00:10:11,040
And that's now the number container component
199

199
00:10:11,040 --> 00:10:13,290
that should be used in the game screen
200

200
00:10:13,290 --> 00:10:16,100
to output the guessed number.
201

201
00:10:16,100 --> 00:10:18,280
So for this here, below this title,
202

202
00:10:18,280 --> 00:10:22,020
I'll output the Number Container
203

203
00:10:22,020 --> 00:10:25,610
Which therefore of course must be imported
204

204
00:10:25,610 --> 00:10:28,503
from components game Number Container.
205

205
00:10:30,020 --> 00:10:31,440
And with that import added,
206

206
00:10:31,440 --> 00:10:33,880
we can use that here in our JSX code
207

207
00:10:34,910 --> 00:10:37,550
And between the opening and closing text,
208

208
00:10:37,550 --> 00:10:41,763
I will pass in the current guess that was made by the phone.
209

209
00:10:42,670 --> 00:10:45,430
Now, if we saved it and reload everything,
210

210
00:10:45,430 --> 00:10:49,547
it looks like there is an error with this import
211

211
00:10:52,890 --> 00:10:57,170
Looks like this import path was not updated by VS code.
212

212
00:10:57,170 --> 00:11:00,360
The title component is now in the UI sub folder.
213

213
00:11:00,360 --> 00:11:02,600
So we must look for it there.
214

214
00:11:02,600 --> 00:11:06,790
And in addition, yeah, looks like a couple of other imports,
215

215
00:11:06,790 --> 00:11:08,990
although were not adjusted
216

216
00:11:08,990 --> 00:11:12,290
like here inside the title component.
217

217
00:11:12,290 --> 00:11:15,730
We need to go up one step further.
218

218
00:11:15,730 --> 00:11:18,110
We need to go up to a higher level folder
219

219
00:11:18,110 --> 00:11:20,930
because we moved title into a lower level folder,
220

220
00:11:20,930 --> 00:11:23,480
into this new UI folder.
221

221
00:11:23,480 --> 00:11:25,083
So that was also missing.
222

222
00:11:26,450 --> 00:11:30,200
And now it looks like things are working again.
223

223
00:11:30,200 --> 00:11:35,200
So let's force a reload on all these devices.
224

224
00:11:36,040 --> 00:11:41,040
And now if I start this game, here is my guess.
225

225
00:11:41,140 --> 00:11:43,270
And actually, if I look at this
226

226
00:11:43,270 --> 00:11:45,520
I think it will look a bit nicer
227

227
00:11:45,520 --> 00:11:48,340
if the title is not also yellow,
228

228
00:11:48,340 --> 00:11:50,003
but if it is maybe white.
229

229
00:11:50,870 --> 00:11:52,770
So here in Title.js,
230

230
00:11:52,770 --> 00:11:56,643
instead of using colors accent 500, I'll use white.
231

231
00:11:57,780 --> 00:11:59,750
By the way, we could store this white color
232

232
00:11:59,750 --> 00:12:01,800
in our colors constant as well.
233

233
00:12:01,800 --> 00:12:05,330
But since this is already a clear predefined identifier
234

234
00:12:05,330 --> 00:12:07,470
I'll just use it like this.
235

235
00:12:07,470 --> 00:12:09,250
Yeah, this looks a bit nicer.
236

236
00:12:09,250 --> 00:12:10,960
Now we have our guess here
237

237
00:12:10,960 --> 00:12:13,710
and this initial guess of course will be different
238

238
00:12:13,710 --> 00:12:15,590
every time we start a new game.
239

239
00:12:15,590 --> 00:12:17,230
So here on Android, it's different
240

240
00:12:17,230 --> 00:12:19,173
than what we see on iOS, for example.
241

241
00:12:20,020 --> 00:12:22,000
And if we would restart the game on iOS,
242

242
00:12:22,000 --> 00:12:23,610
we would also very likely get
243

243
00:12:23,610 --> 00:12:25,670
a different number the next time.
244

244
00:12:25,670 --> 00:12:27,860
But of course, that's just the first step.
245

245
00:12:27,860 --> 00:12:30,820
Deriving an initial random number is nice
246

246
00:12:30,820 --> 00:12:33,450
but now we need to make sure that we have buttons
247

247
00:12:33,450 --> 00:12:36,260
that allow us to give the computer some feedback
248

248
00:12:36,260 --> 00:12:38,910
on whether that number is too big or too small
249

249
00:12:38,910 --> 00:12:41,553
so that a new number can be derived.