1
00:00:02,381 --> 00:00:04,490
[Maximilian SchwarzmÃ¼ller] So, did you succeed?
2

2
00:00:04,490 --> 00:00:07,290
Let's build this FlatList together.
3

3
00:00:07,290 --> 00:00:10,050
For this year, we render a FlatList.
4

4
00:00:10,050 --> 00:00:12,900
And you learned that you need to provide the data prop,
5

5
00:00:12,900 --> 00:00:15,680
which points at the array that holds the data
6

6
00:00:15,680 --> 00:00:17,600
that should be output.
7

7
00:00:17,600 --> 00:00:22,600
And in this case, that's our guessRounds state snapshot.
8

8
00:00:22,700 --> 00:00:25,563
That's the array of data which we wanna output.
9

9
00:00:27,250 --> 00:00:29,930
Now then we need to provide render item,
10

10
00:00:29,930 --> 00:00:32,410
which receives a function that is responsible
11

11
00:00:32,410 --> 00:00:35,470
for rendering the individual items.
12

12
00:00:35,470 --> 00:00:38,320
So a function that will be called by FlatList
13

13
00:00:38,320 --> 00:00:40,883
for every item in our data array.
14

14
00:00:42,010 --> 00:00:46,090
Now, here we can provide an arrow function
15

15
00:00:46,090 --> 00:00:49,370
and we wanna render, let's say a text element
16

16
00:00:49,370 --> 00:00:53,710
for every item in this guessRounds array.
17

17
00:00:53,710 --> 00:00:54,940
And you did learn
18

18
00:00:54,940 --> 00:00:59,540
that you automatically receive the itemData here
19

19
00:00:59,540 --> 00:01:00,640
as an argument,
20

20
00:01:00,640 --> 00:01:05,640
automatically passed in by React Native, by FlatList.
21

21
00:01:06,090 --> 00:01:08,110
And therefore between those text text,
22

22
00:01:08,110 --> 00:01:10,080
we can then output itemData.item.value
23

23
00:01:13,500 --> 00:01:16,050
if this would be a object with a value property,
24

24
00:01:16,050 --> 00:01:19,940
but in this case, the item itself is already a number.
25

25
00:01:19,940 --> 00:01:22,653
So we just output that item, that number.
26

26
00:01:24,520 --> 00:01:25,710
Now, you also learned
27

27
00:01:25,710 --> 00:01:29,400
that the key that uniquely identifies every item
28

28
00:01:29,400 --> 00:01:32,420
is also needed when working with FlatList.
29

29
00:01:32,420 --> 00:01:35,590
But you don't add the key by adding a key prop,
30

30
00:01:35,590 --> 00:01:38,690
instead FlatList will add it for you.
31

31
00:01:38,690 --> 00:01:43,000
It will look for a key property on your data objects.
32

32
00:01:43,000 --> 00:01:45,710
But since our data are no objects,
33

33
00:01:45,710 --> 00:01:48,583
but instead primitive numbers, it won't find that.
34

34
00:01:49,840 --> 00:01:53,030
Hence we can add this keyExtractor prop,
35

35
00:01:53,030 --> 00:01:56,763
where we tell FlatList how to derive a fitting key.
36

36
00:01:57,830 --> 00:02:01,510
And for that here, we provide a function as well
37

37
00:02:01,510 --> 00:02:04,750
which will also be executed by FlatList.
38

38
00:02:04,750 --> 00:02:08,820
And in here we get our item, and we know that in this case,
39

39
00:02:08,820 --> 00:02:10,940
the them itself is a perfect key
40

40
00:02:10,940 --> 00:02:13,180
because the item itself is a number,
41

41
00:02:13,180 --> 00:02:15,020
which is guaranteed to be unique
42

42
00:02:15,020 --> 00:02:17,840
for every guessRounds element.
43

43
00:02:17,840 --> 00:02:19,620
So we have a unique key here,
44

44
00:02:19,620 --> 00:02:24,220
and we just tell FlatList to basically use our data itself
45

45
00:02:24,220 --> 00:02:27,333
as a key, since every data item will be unique.
46

46
00:02:29,170 --> 00:02:32,840
Okay, so now with that, we have a FlatList,
47

47
00:02:32,840 --> 00:02:35,850
and if we save this and we give this a try,
48

48
00:02:35,850 --> 00:02:38,110
this also is looking quite good.
49

49
00:02:38,110 --> 00:02:41,100
And we now render these items here.
50

50
00:02:41,100 --> 00:02:43,080
As a next step, we of course wanna improve
51

51
00:02:43,080 --> 00:02:44,440
the styling of these items
52

52
00:02:44,440 --> 00:02:48,053
because at the moment they are, well, ugly, to be honest.