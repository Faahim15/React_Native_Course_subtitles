1
00:00:02,906 --> 00:00:05,290
So let's now manage that list of goals.
2

2
00:00:05,290 --> 00:00:07,740
For this I will again add some state here
3

3
00:00:07,740 --> 00:00:09,070
because my list of goals
4

4
00:00:09,070 --> 00:00:12,590
is also some data that changes dynamically
5

5
00:00:12,590 --> 00:00:15,633
and as it changes, the UI should be updated.
6

6
00:00:16,521 --> 00:00:18,621
And that's a typical case for using state.
7

7
00:00:19,600 --> 00:00:22,410
And this state will be initialized with an empty array
8

8
00:00:22,410 --> 00:00:24,810
because I wanna manage a list of goals
9

9
00:00:24,810 --> 00:00:26,683
and initially I have no goal.
10

10
00:00:27,879 --> 00:00:30,230
Now I'll give this state a name of course, goals,
11

11
00:00:30,230 --> 00:00:33,560
because these are my goals for this course, let's say.
12

12
00:00:33,560 --> 00:00:36,853
And to set course goals, updating function.
13

13
00:00:37,970 --> 00:00:39,600
And now in add goal handler,
14

14
00:00:39,600 --> 00:00:43,000
instead of logging our entered text to the console,
15

15
00:00:43,000 --> 00:00:47,283
we can call set course goal and update our goals.
16

16
00:00:48,218 --> 00:00:49,430
And in the end I wanna take my existing goals
17

17
00:00:49,430 --> 00:00:50,943
and append a new one.
18

18
00:00:51,970 --> 00:00:54,010
Now, there are various ways of doing that.
19

19
00:00:54,010 --> 00:00:56,730
One way would be to create a new array
20

20
00:00:56,730 --> 00:01:00,570
and use the spread operator, these three dots,
21

21
00:01:00,570 --> 00:01:02,010
which is standard JavaScript code,
22

22
00:01:02,010 --> 00:01:03,883
modern JavaScript code,
23

23
00:01:04,900 --> 00:01:08,650
to spread existing course goals into this new array,
24

24
00:01:08,650 --> 00:01:11,060
so that I keep all the existing course goals.
25

25
00:01:11,060 --> 00:01:13,400
And then I add my new goal,
26

26
00:01:13,400 --> 00:01:15,660
by adding the entered goal text,
27

27
00:01:15,660 --> 00:01:17,380
let's say, as a new goal.
28

28
00:01:17,380 --> 00:01:19,793
In this case, a goal is simply a string.
29

29
00:01:20,760 --> 00:01:24,490
We could do this, but if you followed a good React resource,
30

30
00:01:24,490 --> 00:01:27,850
like my course or the official docs, then you know
31

31
00:01:27,850 --> 00:01:30,940
that this is not the best way of updating state
32

32
00:01:30,940 --> 00:01:34,283
if your new state depends on the previous state.
33

33
00:01:35,239 --> 00:01:36,589
Which this state here does.
34

34
00:01:37,611 --> 00:01:39,530
If your new state depends on the previous state,
35

35
00:01:39,530 --> 00:01:41,600
a better way of updating
36

36
00:01:41,600 --> 00:01:45,880
is to pass a function to this state updating function,
37

37
00:01:45,880 --> 00:01:49,320
a function which will be called automatically by React
38

38
00:01:49,320 --> 00:01:52,090
Q then derive the new state.
39

39
00:01:52,090 --> 00:01:53,920
And this function will automatically
40

40
00:01:53,920 --> 00:01:57,163
receive the existing state by React.
41

41
00:01:58,460 --> 00:02:01,260
So here we could turn this into an arrow function
42

42
00:02:01,260 --> 00:02:05,430
that gets the current course goals as a input, let's say.
43

43
00:02:05,430 --> 00:02:06,800
So as a parameter.
44

44
00:02:06,800 --> 00:02:08,680
And again, the value for this parameter
45

45
00:02:08,680 --> 00:02:11,580
will be provided automatically by React
46

46
00:02:11,580 --> 00:02:13,840
when it calls this updating function
47

47
00:02:13,840 --> 00:02:17,455
or this function that's passed to the updating function,
48

48
00:02:17,455 --> 00:02:18,288
to be precise.
49

49
00:02:19,642 --> 00:02:21,775
And now this value, current core goals,
50

50
00:02:21,775 --> 00:02:24,672
can be used inside this arrow function body.
51

51
00:02:24,672 --> 00:02:28,113
And now we do derive this new state in a better way.
52

52
00:02:29,361 --> 00:02:30,940
The other approach would've worked as well
53

53
00:02:30,940 --> 00:02:32,820
but this is a recommended way,
54

54
00:02:32,820 --> 00:02:35,223
a best practice way of updating your state.
55

55
00:02:36,660 --> 00:02:39,180
So now we're updating this course goal state
56

56
00:02:39,180 --> 00:02:42,833
based on the old course goals by appending a new goal.
57

57
00:02:44,047 --> 00:02:45,519
The next step of course
58

58
00:02:45,519 --> 00:02:48,320
is to now output the list of goals here.
59

59
00:02:48,320 --> 00:02:50,740
And how does this work?
60

60
00:02:50,740 --> 00:02:53,110
Well, it works basically
61

61
00:02:53,110 --> 00:02:56,053
as it does in React for the web as well.
62

62
00:02:57,022 --> 00:03:00,320
We have an array of values which we wanna output
63

63
00:03:00,320 --> 00:03:03,780
and in React for the web we would use the map method,
64

64
00:03:03,780 --> 00:03:08,780
typically, to map our array of data, of strings, or objects,
65

65
00:03:09,450 --> 00:03:13,910
into an array of JSX elements which can then be output
66

66
00:03:14,814 --> 00:03:17,460
in the JSX code returned by this component.
67

67
00:03:17,460 --> 00:03:19,243
And we can do the same thing here.
68

68
00:03:20,332 --> 00:03:22,530
Instead of outputting this dummy text down there,
69

69
00:03:22,530 --> 00:03:24,930
I want to output something dynamic,
70

70
00:03:24,930 --> 00:03:28,210
which we do by adding curly braces, opening and closing.
71

71
00:03:28,210 --> 00:03:30,480
We can now refer to the course goals array,
72

72
00:03:30,480 --> 00:03:32,143
and call the map method on it.
73

73
00:03:32,980 --> 00:03:34,820
A standard JavaScript method
74

74
00:03:34,820 --> 00:03:38,972
because we are writing standard JavaScript code here.
75

75
00:03:38,972 --> 00:03:40,909
As you learned.
76

76
00:03:40,909 --> 00:03:44,440
Now, this map method receives a function, as it always does,
77

77
00:03:44,440 --> 00:03:46,683
and here I'll pass in an arrow function,
78

78
00:03:47,838 --> 00:03:49,730
which as an argument, as a parameter,
79

79
00:03:49,730 --> 00:03:53,965
gets the individual values stored in course goals,
80

80
00:03:53,965 --> 00:03:56,953
so my goals here,
81

81
00:03:56,953 --> 00:03:58,940
the single goals I have in this array of goals,
82

82
00:03:58,940 --> 00:04:01,820
this function is called for every item in the array.
83

83
00:04:01,820 --> 00:04:04,763
So every function called receives a single goal.
84

84
00:04:05,620 --> 00:04:08,440
And then as a return value in this arrow function,
85

85
00:04:08,440 --> 00:04:10,480
we returned a JSX element
86

86
00:04:10,480 --> 00:04:14,120
that should be rendered for the individual goal.
87

87
00:04:14,120 --> 00:04:16,550
And in this case, I wanna output the goal text.
88

88
00:04:16,550 --> 00:04:21,160
So here I will render a text JSX element,
89

89
00:04:21,160 --> 00:04:23,720
and then between the opening and closing text
90

90
00:04:23,720 --> 00:04:24,903
I output goal.
91

91
00:04:26,908 --> 00:04:30,750
Since my goals are just strings here in this array
92

92
00:04:30,750 --> 00:04:33,770
because I just add my entered goal text,
93

93
00:04:33,770 --> 00:04:36,460
which is just the text that was provided,
94

94
00:04:36,460 --> 00:04:37,943
and therefore just a string,
95

95
00:04:39,482 --> 00:04:42,950
I can simply output the goal between those text like this
96

96
00:04:42,950 --> 00:04:44,700
because goal will just be a string.
97

97
00:04:46,470 --> 00:04:48,055
And with that, if we save this
98

98
00:04:48,055 --> 00:04:50,488
and we give this a try here.
99

99
00:04:50,488 --> 00:04:52,913
Learn React Native.
100

100
00:04:54,816 --> 00:04:56,880
If I click add goal, this is added
101

101
00:04:57,740 --> 00:04:59,663
but we also get a warning here.
102

102
00:05:00,738 --> 00:05:04,463
The same will be true on the iPhone here.
103

103
00:05:04,463 --> 00:05:06,323
If I learn React Native, it works.
104

104
00:05:07,199 --> 00:05:10,480
If I learn it with multiple exclamation marks
105

105
00:05:10,480 --> 00:05:13,345
I still see that it works.
106

106
00:05:13,345 --> 00:05:15,300
I add another goal now as expected
107

107
00:05:16,384 --> 00:05:17,413
but we get a warning here.
108

108
00:05:19,431 --> 00:05:20,740
We get a warning that each child in a list
109

109
00:05:20,740 --> 00:05:23,260
should have a unique key prop.
110

110
00:05:23,260 --> 00:05:25,480
And this is actually a warning you might know
111

111
00:05:25,480 --> 00:05:27,463
from React for the web as well,
112

112
00:05:28,352 --> 00:05:29,521
because this is a warning
113

113
00:05:29,521 --> 00:05:32,078
that has nothing to do with React Native.
114

114
00:05:32,078 --> 00:05:35,310
Instead with React in general,
115

115
00:05:35,310 --> 00:05:39,410
when outputting a list of data, as we're doing it here,
116

116
00:05:39,410 --> 00:05:43,530
every item in that list should receive a key prop
117

117
00:05:43,530 --> 00:05:47,407
which uniquely identifies the individual list item.
118

118
00:05:47,407 --> 00:05:50,380
Under the hood this helps React
119

119
00:05:50,380 --> 00:05:53,723
update the list in an efficient way, so to say.
120

120
00:05:54,622 --> 00:05:56,630
I do explain this in greater detail in my React course,
121

121
00:05:56,630 --> 00:05:59,270
but you should always add this key prop
122

122
00:05:59,270 --> 00:06:00,760
to the individual items
123

123
00:06:00,760 --> 00:06:02,810
that you're outputting as part of a list.
124

124
00:06:03,800 --> 00:06:06,660
Now, the value you pass to key can be anything
125

125
00:06:06,660 --> 00:06:08,410
but it should be something unique
126

126
00:06:08,410 --> 00:06:10,960
that uniquely identifies the concrete value
127

127
00:06:10,960 --> 00:06:12,360
that you're outputting here.
128

128
00:06:13,950 --> 00:06:15,921
In this case, I'm just outputting goals,
129

129
00:06:15,921 --> 00:06:16,754
which are just strings,
130

130
00:06:16,754 --> 00:06:18,313
so I'll take the goal string itself.
131

131
00:06:20,145 --> 00:06:22,050
This is actually not necessarily unique
132

132
00:06:22,050 --> 00:06:26,090
because I could enter the exact same goal text twice
133

133
00:06:26,090 --> 00:06:29,323
but it's good enough for now, we'll improve this soon.
134

134
00:06:30,766 --> 00:06:32,500
Now with this key prop added here though.
135

135
00:06:32,500 --> 00:06:36,523
Now, if I add another goal, I don't get the warning again.
136

136
00:06:37,670 --> 00:06:39,010
And of course here,
137

137
00:06:39,010 --> 00:06:41,860
we don't have to enter the same text all the time.
138

138
00:06:41,860 --> 00:06:45,297
We can also learn different pieces of text,
139

139
00:06:45,297 --> 00:06:47,951
like learn all the details,
140

140
00:06:47,951 --> 00:06:50,301
and as you see, our list keeps on growing here.
141

141
00:06:51,420 --> 00:06:54,350
So with that, we're now able to handle the user input,
142

142
00:06:54,350 --> 00:06:58,370
store it and React to a tap on this button.
143

143
00:06:58,370 --> 00:07:01,806
And then we do something which you certainly did
144

144
00:07:01,806 --> 00:07:03,660
many times with React for the web.
145

145
00:07:03,660 --> 00:07:06,930
We're outputting that data here in a list,
146

146
00:07:06,930 --> 00:07:09,080
but that's of course not all we want to do.